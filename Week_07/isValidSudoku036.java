package Week_07;
/*
题目：判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
上图是一个部分填充的有效的数独。
数独部分空格内已填入了数字，空白格用 '.' 表示。
示例 1:
输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:
输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
*/

import java.util.List;

public class isValidSudoku036{
    public static void main (String[] args) {

    }
}

class Solution {
    public boolean isValidSudoku(char[][] board) {
        //borad[i][j]表示了对固定的一行i，遍历列j(即每次检查一整行)
        //board[j][i]表示了对固定的一列i，遍历行j(即每次检查一整列)
        //board[3∗(i/3)+j/3][3∗(i%3)+j%3]表示了对固定的宫i，遍历格j(即每次检查一个宫)
        //使用一个99位二进制数判断数字是否被访问。第k位数为1代表已加入，为0代表未加入
        for(int i = 0;i<9;i++) {
            int row = 0,col = 0,sqre = 0;
            for(int j = 0;j < 9;j++){
                //由于输入为字符串，需转换为int
                int r = board[i][j] - 48;
                int c = board[j][i] - 48;
                int s = board[3*(i/3)+j/3][3*(i%3)+j%3] - 48;
                if(r>0){
                    row = judge(r,row);
                }
                if(c > 0){
                    col = judge(c,col);
                }
                if(s>0){
                    sqre = judge(s,sqre);
                }
                if(row == -1||col== -1||sqre == -1)
                {
                    return false;
                }
            }
        }
        return true;
    }
    //定义9位数100000000，移动n位来存储是否被占用的信息
    private int judge(int n, int val){
        return ((val >> n) & 1) == 1 ? -1 : val^( 1 << n);
    }
}